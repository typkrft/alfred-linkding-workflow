<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>org.acez.alfred.linkding</string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>B651DE85-ED40-4878-BB41-7B194461EEE0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>C4D3BBC2-F30B-43F9-8C56-6AFD7D26A398</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F5127422-D861-4BF0-9909-DFCB7E4C048D</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7D675B8A-A09C-4651-ACA9-C45EE05D7EE6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Christian Wilhelm</string>
	<key>description</key>
	<string>Search for linkding bookmarks</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>linkding</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>ld</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>#!/usr/bin/env python3
# linkding-helper.py
# created by Christian Wilhelm
import http.client
import json
import os
import sys


class AlfredItem:
    def __init__(self, title: str, subtitle: str = None, arg: str = None, quicklookurl: str = None):
        self._title = title
        self._subtitle = subtitle
        self._arg = arg
        self._quicklookurl = quicklookurl

    def __dict__(self):
        return {
            "title": self._title,
            "subtitle": self._subtitle,
            "quicklookurl": self._quicklookurl,
            "arg": self._arg,
            "icon": {
                "type": "fileicon",
                "path": "/Applications/Safari.app"
            }
        }


class AlfredOutputFormatter:
    def __init__(self, items: [AlfredItem]):
        self._items = items

    def print(self):
        output_format = {
            "items": self._items
        }
        output = json.dumps(output_format, default=lambda o: o.__dict__())
        print(output)


class LinkdingBookmark:
    def __init__(self, bookmark):
        self._url: str = bookmark["url"] or ""
        self._title: str = bookmark["title"] or bookmark["website_title"] or bookmark["url"]
        self._tags: [str] = list(map(lambda tag: "#%s" % tag, bookmark["tag_names"]))

    def to_alfred_item(self) -&gt; AlfredItem:
        return AlfredItem(title=self._title, subtitle=self._url, arg=self._url, quicklookurl=self._url)

    def matches_query(self, query_token: [str]) -&gt; bool:
        if len(query_token) == 0:
            return True
        matched = list(map(lambda token: self._matches_single_token(token), query_token))
        return False not in matched

    def _matches_single_token(self, token: str) -&gt; bool:
        if token.startswith("#"):
            for tag in self._tags:
                if tag.lower().find(token) != -1:
                    return True
            return False
        if self._title.lower().find(token) != -1:
            return True
        if self._url.lower().find(token) != -1:
            return True
        return False


class LocalBookmarksCacheClient:
    def __init__(self, cache_dir: str):
        bookmarks_cache_file = os.path.join(cache_dir, "bookmarks.json")
        self._bookmarks = []
        try:
            with open(bookmarks_cache_file, mode="r") as f:
                bookmark_list = json.loads(f.read())
                self._bookmarks = list(map(lambda row: LinkdingBookmark(bookmark=row), bookmark_list))
        except FileNotFoundError:
            self._bookmarks = []

    def bookmarks(self, query: str) -&gt; [LinkdingBookmark]:
        query = query.lower()
        query_token = query.split(' ')
        alfred_bookmark_items = []
        for bookmark in self._bookmarks:
            if bookmark.matches_query(query_token=query_token):
                alfred_bookmark_items.append(bookmark)
        return alfred_bookmark_items


if __name__ == "__main__":
    input_query = sys.argv[1] if len(sys.argv) == 2 else ""
    env_cache_dir = os.environ["alfred_workflow_cache"]
    client = LocalBookmarksCacheClient(env_cache_dir)
    items = list(map(lambda v: v.to_alfred_item(), client.bookmarks(query=input_query)))
    AlfredOutputFormatter(items=items).print()
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>9</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B651DE85-ED40-4878-BB41-7B194461EEE0</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>skipqueryencode</key>
				<false/>
				<key>skipvarencode</key>
				<false/>
				<key>spaces</key>
				<string></string>
				<key>url</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>C4D3BBC2-F30B-43F9-8C56-6AFD7D26A398</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>#!/usr/bin/env python3
# linkding-helper.py
# created by Christian Wilhelm
import urllib.request
import os
import json
import pathlib


class LinkdingClient:
    def __init__(self, host: str, token: str):
        self._host = host
        self._token = token

    def _request(self, url: str) -&gt; {}:
        req = urllib.request.Request(url)
        req.add_header('Authorization', 'Token %s' % self._token)
        req.add_header('User-Agent', 'Mozilla/5.0')
        r = urllib.request.urlopen(req)
        parsed = json.loads(r.read())
        return parsed

    def _load_page(self, url: str) -&gt; ({}, str):
        data = self._request(url)
        return data["results"], data["next"]

    def collect_bookmarks(self):
        url = "%s/api/bookmarks/" % self._host
        all_bookmarks = []
        while url is not None:
            bookmarks, url = self._load_page(url)
            all_bookmarks = all_bookmarks + bookmarks
        return all_bookmarks


if __name__ == "__main__":
    env_token = os.environ["linkding_token"]
    env_host = os.environ["linkding_host"]
    env_cache_dir = os.environ["alfred_workflow_cache"]
    bookmark_cache_file = os.path.join(env_cache_dir, "bookmarks.json")
    cache_path = pathlib.Path(env_cache_dir)
    cache_path.mkdir(parents=True, exist_ok=True)

    client = LinkdingClient(host=env_host, token=env_token)
    bookmarks = client.collect_bookmarks()
    with open(bookmark_cache_file, mode="w") as f:
        f.write(json.dumps(bookmarks))</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>9</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>7D675B8A-A09C-4651-ACA9-C45EE05D7EE6</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ldrefresh</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>refresh local bookmarks cache</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>F5127422-D861-4BF0-9909-DFCB7E4C048D</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Search for bookmarks on your local linkding instance</string>
	<key>uidata</key>
	<dict>
		<key>7D675B8A-A09C-4651-ACA9-C45EE05D7EE6</key>
		<dict>
			<key>xpos</key>
			<real>670</real>
			<key>ypos</key>
			<real>295</real>
		</dict>
		<key>B651DE85-ED40-4878-BB41-7B194461EEE0</key>
		<dict>
			<key>xpos</key>
			<real>385</real>
			<key>ypos</key>
			<real>145</real>
		</dict>
		<key>C4D3BBC2-F30B-43F9-8C56-6AFD7D26A398</key>
		<dict>
			<key>xpos</key>
			<real>685</real>
			<key>ypos</key>
			<real>145</real>
		</dict>
		<key>F5127422-D861-4BF0-9909-DFCB7E4C048D</key>
		<dict>
			<key>xpos</key>
			<real>365</real>
			<key>ypos</key>
			<real>295</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>https://linkding.my-local.host</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string>The URL to your local linkding instance.</string>
			<key>label</key>
			<string>Linkding instance</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>linkding_host</string>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>The Linkding Token for Authentication</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>linkding_token</string>
		</dict>
	</array>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/acez</string>
</dict>
</plist>
